name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  NODE_VERSION: '20'

jobs:
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–¥–∞ –∏ –ª–∏–Ω—Ç–∏–Ω–≥–∞
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linting
        run: yarn lint

      - name: Build library
        run: yarn build

      - name: Upload library build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lib-dist
          path: dist/

      - name: Clean dist for demo build
        run: rm -rf dist

      - name: Build demo app
        run: yarn build:demo

      - name: Upload demo build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: demo-dist
          path: dist/

  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
  version-and-publish:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Download library build artifacts
        uses: actions/download-artifact@v4
        with:
          name: lib-dist
          path: dist/

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Check if version was updated
        id: version-check
        run: |
          # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –≤–µ—Ä—Å–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ
          VERSION_CHANGED=$(git diff HEAD~1 HEAD -- package.json | grep '"version":' || true)

          if [ -z "$VERSION_CHANGED" ]; then
            echo "version-changed=false" >> $GITHUB_OUTPUT
            echo "Version was NOT changed in the last commit"
          else
            echo "version-changed=true" >> $GITHUB_OUTPUT
            echo "Version was changed in the last commit"
          fi

      - name: Auto-bump version
        if: steps.version-check.outputs.version-changed == 'false'
        run: |
          echo "Auto-bumping patch version..."
          yarn version --patch --no-git-tag-version

          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"

          # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push origin ${{ github.ref_name }}

      - name: Get final version
        id: final-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"

      - name: Create Git tag
        run: |
          VERSION=${{ steps.final-version.outputs.version }}
          git tag v$VERSION
          git push origin v$VERSION

      - name: Check if version exists on NPM
        id: npm-check
        run: |
          VERSION=${{ steps.final-version.outputs.version }}
          if npm view dobruniaui@$VERSION version 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Version $VERSION already exists on NPM"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Version $VERSION does not exist on NPM"
          fi

      - name: Publish to NPM
        if: steps.npm-check.outputs.exists == 'false'
        run: yarn publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.npm-check.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.final-version.outputs.version }}
          release_name: Release v${{ steps.final-version.outputs.version }}
          body: |
            üöÄ **DobruniaUI v${{ steps.final-version.outputs.version }}**

            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ª–∏–∑ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.

            ### üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞
            ```bash
            npm install dobruniaui@${{ steps.final-version.outputs.version }}
            # –∏–ª–∏
            yarn add dobruniaui@${{ steps.final-version.outputs.version }}
            ```

            ### üéÆ –î–µ–º–æ
            –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –¥–µ–π—Å—Ç–≤–∏–∏: https://dobrunia.github.io/DobruniaUI/

            ### üìã –ò–∑–º–µ–Ω–µ–Ω–∏—è
            –°–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–º–º–∏—Ç—ã –≤ —ç—Ç–æ–º —Ä–µ–ª–∏–∑–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
          draft: false
          prerelease: false

  # –î–µ–ø–ª–æ–π –¥–µ–º–æ-–ø–ª–µ–π–≥—Ä–∞—É–Ω–¥–∞ –Ω–∞ GitHub Pages
  deploy-demo:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: read
      pages: write
      id-token: write
      actions: read
      deployments: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download demo build artifacts
        uses: actions/download-artifact@v4
        with:
          name: demo-dist
          path: ./dist

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
