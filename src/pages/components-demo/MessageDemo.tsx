import { Message, type MessageType } from '@DobruniaUI';
import { useState } from 'react';

const userMe = {
  id: 'me',
  name: '–Ø',
  avatar: 'https://randomuser.me/api/portraits/men/32.jpg',
};
const userOther = {
  id: 'other',
  name: '–ê–Ω—è',
  avatar: 'https://randomuser.me/api/portraits/women/44.jpg',
};

const initialMessages: Array<{
  type: MessageType;
  text: string;
  time: string;
  reactions: { emoji: string; users: (typeof userMe)[] }[];
  sender?: typeof userMe;
  isRead: boolean;
  attachments?: {
    type: 'image' | 'file' | 'audio';
    url: string;
    name?: string;
    size?: number;
    duration?: number;
  }[];
}> = [
  {
    type: 'incoming',
    text: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
    time: '8:10',
    reactions: [
      { emoji: '‚ù§Ô∏è', users: [userMe, userOther] },
      { emoji: 'üòÇ', users: [userOther] },
      { emoji: 'üëç', users: [userMe] },
      { emoji: 'üî•', users: [userMe] },
    ],
    sender: userOther,
    isRead: false,
  },
  {
    type: 'outgoing',
    text: '–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! üòä',
    time: '8:10',
    reactions: [{ emoji: '‚ù§Ô∏è', users: [userMe, userOther] }],
    sender: userMe,
    isRead: false,
  },
  {
    type: 'incoming',
    text: '–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞!',
    time: '8:11',
    reactions: [],
    sender: userOther,
    isRead: true,
    attachments: [
      {
        type: 'image',
        url: '/src/assets/204596508.jfif',
        name: 'beautiful-image.jpg',
      },
    ],
  },
  {
    type: 'outgoing',
    text: '–ê –≤–æ—Ç –º–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
    time: '8:12',
    reactions: [],
    sender: userMe,
    isRead: true,
    attachments: [
      {
        type: 'audio',
        url: '/src/assets/cxdy-spooky-szn.mp3',
        name: 'voice-message.mp3',
        duration: 180, // 3 minutes in seconds
      },
    ],
  },
  {
    type: 'incoming',
    text: '–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!',
    time: '8:13',
    reactions: [],
    sender: userOther,
    isRead: true,
  },
  {
    type: 'incoming',
    text: '–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.',
    time: '8:14',
    reactions: [],
    sender: undefined,
    isRead: false,
  },
  {
    type: 'outgoing',
    text: '–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.',
    time: '8:15',
    reactions: [],
    sender: undefined,
    isRead: false,
  },
  {
    type: 'outgoing',
    text: '–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! üòä',
    time: '8:16',
    reactions: [
      { emoji: '‚ù§Ô∏è', users: [userMe, userOther] },
      { emoji: 'üòÇ', users: [userOther] },
      { emoji: 'üëç', users: [userMe] },
      { emoji: 'üî•', users: [userMe] },
    ],
    sender: userMe,
    isRead: true,
  },
  {
    type: 'outgoing',
    text: '–í',
    time: '8:17',
    reactions: [],
    sender: userMe,
    isRead: true,
  },
];

const actionsDemo = [
  {
    label: '–û—Ç–≤–µ—Ç–∏—Ç—å',
    icon: <span style={{ fontSize: 20 }}>‚Ü©Ô∏è</span>,
    onClick: () => alert('–û—Ç–≤–µ—Ç–∏—Ç—å'),
  },
  {
    label: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç',
    icon: <span style={{ fontSize: 20 }}>üìã</span>,
    onClick: () => alert('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!'),
  },
  {
    label: '–ü–µ—Ä–µ—Å–ª–∞—Ç—å',
    icon: <span style={{ fontSize: 20 }}>üîÄ</span>,
    onClick: () => alert('–ü–µ—Ä–µ—Å–ª–∞–Ω–æ!'),
  },
  {
    label: '–£–¥–∞–ª–∏—Ç—å',
    icon: <span style={{ fontSize: 20 }}>üóëÔ∏è</span>,
    onClick: () => alert('–£–¥–∞–ª–µ–Ω–æ!'),
  },
];

export const MessageDemo = () => {
  const [messages, setMessages] = useState(initialMessages);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ –∏–Ω–¥–µ–∫—Å—É
  const handleReaction = (msgIdx: number, emoji: string) => {
    setMessages((prev) =>
      prev.map((msg, i) => {
        if (i !== msgIdx) return msg;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è –æ—Ç userMe
        const existing = msg.reactions.find(
          (r) => r.emoji === emoji && r.users.some((u) => u.id === userMe.id)
        );
        if (existing) {
          // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å, —É–±–∏—Ä–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é userMe
          return {
            ...msg,
            reactions: msg.reactions
              .map((r) =>
                r.emoji === emoji ? { ...r, users: r.users.filter((u) => u.id !== userMe.id) } : r
              )
              .filter((r) => r.users.length > 0),
          };
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é userMe
          const found = msg.reactions.find((r) => r.emoji === emoji);
          if (found) {
            return {
              ...msg,
              reactions: msg.reactions.map((r) =>
                r.emoji === emoji ? { ...r, users: [...r.users, userMe] } : r
              ),
            };
          } else {
            return {
              ...msg,
              reactions: [...msg.reactions, { emoji, users: [userMe] }],
            };
          }
        }
      })
    );
  };

  return (
    <div
      style={{
        maxWidth: 720,
        margin: '40px auto',
        background: 'var(--color-elevated)',
        padding: 24,
        borderRadius: 16,
        position: 'relative',
      }}
    >
      {messages.map((msg, idx) => (
        <Message
          key={idx}
          {...msg}
          onReaction={(emoji: string) => handleReaction(idx, emoji)}
          currentUserId={userMe.id}
          actions={actionsDemo}
        />
      ))}
    </div>
  );
};
