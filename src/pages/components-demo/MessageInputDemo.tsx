import { useState } from 'react';
import { Message, MessageContainer, MessageInput } from '@DobruniaUI';

export const MessageInputDemo = () => {
  const [messageText, setMessageText] = useState('');
  const [messageFiles, setMessageFiles] = useState<File[]>([]);
  const [messages, setMessages] = useState<
    Array<{
      id: string;
      text: string;
      time: string;
      type: 'incoming' | 'outgoing';
      attachments?: Array<{
        type: 'image' | 'file' | 'audio';
        url: string;
        name?: string;
        size?: number;
        duration?: number;
      }>;
      reactions: Array<{
        emoji: string;
        users: Array<{ id: string; name: string }>;
      }>;
    }>
  >([
    {
      id: '1',
      text: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
      time: '14:30',
      type: 'incoming',
      reactions: [],
    },
    {
      id: '2',
      text: '–û—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è –∫–∞–∫?',
      time: '14:32',
      type: 'outgoing',
      reactions: [
        {
          emoji: 'üëç',
          users: [{ id: 'user1', name: '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫' }],
        },
      ],
    },
  ]);

  const handleSend = () => {
    if (messageText.trim() || messageFiles.length > 0) {
      const attachments = messageFiles.map((file) => ({
        type: file.type.startsWith('image/')
          ? ('image' as const)
          : file.type.startsWith('audio/')
          ? ('audio' as const)
          : ('file' as const),
        url: URL.createObjectURL(file),
        name: file.name,
        size: file.size,
        duration: file.type.startsWith('audio/') ? 0 : undefined,
      }));

      const newMessage = {
        id: Date.now().toString(),
        text: messageText,
        time: new Date().toLocaleTimeString([], {
          hour: '2-digit',
          minute: '2-digit',
        }),
        type: 'outgoing' as const,
        attachments: attachments.length > 0 ? attachments : undefined,
        reactions: [],
      };

      setMessages((prev) => [...prev, newMessage]);
      setMessageText('');
      setMessageFiles([]);
    }
  };

  const handleEmojiSelect = (emoji: string) => {
    console.log('Selected emoji:', emoji);
  };

  const handleAudioRecord = (audio: Blob) => {
    const audioFile = new File([audio], `audio-${Date.now()}.webm`, {
      type: 'audio/webm',
    });

    setMessageFiles((prev) => [...prev, audioFile]);
  };

  const handleReaction = (messageId: string, emoji: string) => {
    setMessages((prev) =>
      prev.map((msg) => {
        if (msg.id !== messageId) return msg;

        const existingReaction = msg.reactions.find((r) => r.emoji === emoji);
        const currentUserInReaction = existingReaction?.users.some((u) => u.id === 'me');

        if (existingReaction) {
          if (currentUserInReaction) {
            // –£–±–∏—Ä–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é
            return {
              ...msg,
              reactions: msg.reactions
                .map((r) =>
                  r.emoji === emoji ? { ...r, users: r.users.filter((u) => u.id !== 'me') } : r
                )
                .filter((r) => r.users.length > 0),
            };
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–µ–∞–∫—Ü–∏–∏
            return {
              ...msg,
              reactions: msg.reactions.map((r) =>
                r.emoji === emoji ? { ...r, users: [...r.users, { id: 'me', name: '–Ø' }] } : r
              ),
            };
          }
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é
          return {
            ...msg,
            reactions: [...msg.reactions, { emoji, users: [{ id: 'me', name: '–Ø' }] }],
          };
        }
      })
    );
  };

  return (
    <div
      style={{
        display: 'flex',
        flexDirection: 'column',
        maxWidth: 500,
        height: 600,
        margin: '40px auto',
        border: '1px solid var(--c-border)',
        borderRadius: '12px',
        overflow: 'hidden',
        background: 'var(--c-bg-default)',
      }}
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
      <div
        style={{
          padding: '16px 20px',
          borderBottom: '1px solid var(--c-border)',
          background: 'var(--c-bg-elevated)',
          fontWeight: 500,
          fontSize: '1.1rem',
        }}
      >
        MessageInput Demo Chat
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      <div style={{ flex: 1, overflow: 'hidden' }}>
        <MessageContainer maxHeight='100%' autoScrollToBottom>
          {messages.map((msg) => (
            <Message
              key={msg.id}
              id={msg.id}
              type={msg.type}
              text={msg.text}
              time={msg.time}
              attachments={msg.attachments}
              reactions={msg.reactions}
              currentUserId='me'
              reactionEmojis={['‚ù§Ô∏è', 'üòÇ', 'üëç', 'üî•', 'üòÆ', 'üò¢']}
              onReaction={(emoji) => handleReaction(msg.id, emoji)}
            />
          ))}
        </MessageContainer>
      </div>

      {/* –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è */}
      <div
        style={{
          padding: '8px',
          borderTop: '1px solid var(--c-border)',
          background: 'var(--c-bg-elevated)',
        }}
      >
        <MessageInput
          value={messageText}
          onChange={setMessageText}
          files={messageFiles}
          onFilesChange={setMessageFiles}
          onSend={handleSend}
          onEmojiSelect={handleEmojiSelect}
          onAudioRecord={handleAudioRecord}
          placeholder='–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...'
        />
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ */}
      <div
        style={{
          padding: '12px 16px',
          background: 'var(--c-bg-subtle)',
          fontSize: '0.85rem',
          color: 'var(--c-text-secondary)',
          borderTop: '1px solid var(--c-border)',
        }}
      >
        <strong>MessageInput features:</strong>
        <ul style={{ margin: '8px 0', paddingLeft: '20px' }}>
          <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è</li>
          <li>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–µ–≤—å—é (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ñ–∞–π–ª—ã, –∞—É–¥–∏–æ)</li>
          <li>–í—ã–±–æ—Ä —ç–º–æ–¥–∑–∏ —Å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–º –º–µ–Ω—é</li>
          <li>–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π</li>
          <li>–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter (Shift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)</li>
          <li>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è</li>
        </ul>
      </div>
    </div>
  );
};
